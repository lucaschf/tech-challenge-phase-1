name: Deploy Application

on:
  pull_request:
    branches:
      - main
    types:
      - closed
env:
  REGION_DEFAULT: "us-east-1"

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    if: github.event.pull_request.merged == true

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.REGION_DEFAULT }}

      - name: Login to ECR
        run: |
          set -e  # Tratar erros
          aws ecr get-login-password --region ${{ env.REGION_DEFAULT }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.REGION_DEFAULT }}.amazonaws.com

      - name: Build and Push Docker Image
        working-directory: app
        run: |
          set -e  # Tratar erros
          docker build -t tech-challenge-phase-1-api:latest .
          docker tag tech-challenge-phase-1-api:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.REGION_DEFAULT }}.amazonaws.com/project-01:latest  # Remover espa√ßo em branco
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.REGION_DEFAULT }}.amazonaws.com/project-01:latest

      - name: Get kubeconfig
        run: |
          set -e  # Tratar erros
          aws eks --region ${{ env.REGION_DEFAULT }} update-kubeconfig --name ${{ secrets.CLUSTER_NAME }}

      - name: Deploy Application
        working-directory: app/k8s
        run: |
          set -e  # Tratar erros
          kubectl apply -f . 

      - name: Verify Deployment
        run: |
          set -e  # Tratar erros
          kubectl get all
          kubectl rollout status deployment/tech-challenge-phase-1-api
          kubectl get pods -w
          kubectl get nodes
